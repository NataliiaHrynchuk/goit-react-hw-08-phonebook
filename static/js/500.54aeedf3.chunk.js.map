{"version":3,"file":"static/js/500.54aeedf3.chunk.js","mappings":"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","sources":["redux/filter/filterSelectors.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/contactSelectors.js","components/ContactForm.js","components/Filter.js","components/ContactList.js","pages/Contacts.js"],"sourcesContent":["export const selectFilter = state => state.filter;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { selectFilter } from 'redux/filter/filterSelectors';\nimport { createSelector } from \"@reduxjs/toolkit\";\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsloading = state => state.contacts.isloading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    }\n);\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Button, FormControl, Grid, Paper, TextField, Typography } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"redux/contacts/contactsOperations\";\nimport { useSelector } from \"react-redux\";\nimport { selectContacts } from 'redux/contacts/contactSelectors';\n\nexport default function ContactForm() {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(selectContacts);\n\n    const handleChange = event => {\n        const { name, value } = event.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value.trim());\n                break;\n            case 'number':\n                setNumber(value.trim());\n                break;\n            default:\n                return;\n        }\n    };\n    \n    const handleSubmit = event => {\n        event.preventDefault();\n        const newContact = { name, number };\n        const normalizedName = name.toLowerCase();\n        const repeatedName = contacts.find(contact => contact.name.toLowerCase() === normalizedName);\n        const repeatedNumber = contacts.find(contact => contact.number === number);\n            \n        if (repeatedName) {\n            alert(`${name} is already in contacts.`);\n        } else if (repeatedNumber) {\n            alert(`${number} is already in contacts.`);\n        } else {\n            dispatch(addContact(newContact));\n            setName(' ');\n            setNumber(' ');\n        };\n    }\n\n    return (\n        <Paper\n            sx={{\n                minWidth: 400,\n                minHeight: 200,\n                margin: \"auto\",\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                backgroundColor: '#ebe6f3',\n            }}>\n            <Typography variant=\"h6\" sx={{mb: 2}}>Enter new contact</Typography>\n            <FormControl\n                component=\"form\"\n                onSubmit={handleSubmit}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    gap={1}\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n                <Typography component=\"label\" htmlFor=\"id-name\">\n                    Name </Typography>\n                <TextField\n                    type=\"text\"\n                    name=\"name\"\n                    id=\"id-name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    size=\"small\"\n                    sx={{backgroundColor: \"#fff\"}}\n                    onChange={handleChange}\n                />\n                \n                <Typography component=\"label\" htmlFor=\"id-number\">\n                    Number </Typography>\n                <TextField\n                    type=\"tel\"\n                    name=\"number\"\n                    id=\"id-numder\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleChange}\n                    size=\"small\"\n                    sx={{backgroundColor: \"#fff\"}}\n                />\n                \n                <Button type=\"submit\">Add contact</Button>\n            </Grid>\n            </FormControl>\n            \n            </Paper>\n        )\n    };","import { selectFilter } from 'redux/filter/filterSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { Box, TextField } from '@mui/material';\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    const changeFilter = event => {\n        dispatch(setFilter(event.currentTarget.value));\n    };\n    \n    return (\n        <Box\n            sx={{\n                display: \"flex\",\n            flexDirection: 'column',\n            width: \"300px\",\n            alignItems: 'center',}}\n        >\n            <label htmlFor=\"id-filter\">\n                Find contacts by name\n            </label>\n            <TextField\n                type=\"text\"\n                name=\"filter\"\n                id=\"id-filter\"\n                size=\"small\"\n                value={filter}\n                onChange={changeFilter}\n            ></TextField>\n        </Box>\n    )\n};","\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/contactSelectors';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { Button, Grid, Typography } from '@mui/material';\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectVisibleContacts);\n            \n    return (\n            \n        <Grid\n            component=\"ul\"\n            container\n            display=\"flex\"\n            gap=\"10px\"\n        >\n            {contacts.map(({ id, name, number }) => (\n                    <Grid container spasing={3}\n                    key={id}\n                    as=\"li\"\n                    display=\"flex\"\n                    gap=\"20px\"\n                    alignItems=\"center\"\n                >\n                    <Grid item xs >\n                        <Typography variant='body1'>{name}:</Typography>\n                    </Grid>\n                    <Grid item xs>\n                        <Typography variant='body2'>{number}</Typography>\n                    </Grid>\n                    <Grid item xs>\n                    <Button\n                        type=\"button\"\n                        w=\"60px\"\n                        onClick={() => dispatch(deleteContact(id))}\n                    >Delete\n                        </Button>\n                    </Grid>\n                </Grid>\n            ))}\n        </Grid>\n    )\n};\n","import { Helmet } from \"react-helmet\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport  ContactForm from \"components/ContactForm\";\nimport { Filter } from \"components/Filter\";\nimport { ContactList } from \"components/ContactList\";\nimport { selectContacts, selectIsloading } from \"redux/contacts/contactSelectors\";\nimport { Box, Typography } from '@mui/material';\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/contactsOperations\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsloading);\n    const contacts = useSelector(selectContacts);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Box\n            padding={4}\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n        }}>\n            <Helmet>\n                <Typography\n                marginTop=\"100px\"                   \n                variant=\"h1\"\n                    >\n                    Phonebook\n                </Typography>\n            </Helmet>\n\n                <ContactForm />\n                <div>{isLoading && 'Request in progress'}</div>\n                <Typography variant=\"h2\">\n                    Contacts\n                </Typography>\n                {contacts.length > 0 && (\n                    <>\n                        <Filter />\n                        <ContactList />\n                    </>\n                )}\n        </Box>\n    );\n}"],"names":["selectFilter","state","filter","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","contacts","items","selectIsloading","isloading","selectVisibleContacts","contact","toLowerCase","includes","ContactForm","dispatch","useDispatch","useState","setName","number","setNumber","useSelector","handleChange","event","currentTarget","trim","Paper","sx","minWidth","minHeight","margin","p","display","flexDirection","justifyContent","alignItems","backgroundColor","Typography","variant","mb","FormControl","component","onSubmit","preventDefault","newContact","normalizedName","repeatedName","repeatedNumber","alert","addContact","Grid","container","direction","gap","htmlFor","TextField","type","id","pattern","title","required","size","onChange","Button","Filter","Box","width","setFilter","ContactList","spasing","as","item","xs","w","onClick","deleteContact","Contacts","isLoading","useEffect","fetchContacts","padding","Helmet","marginTop"],"sourceRoot":""}